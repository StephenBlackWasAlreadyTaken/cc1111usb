
trying to get my immesniffer to detect anything and display the sync word, if that's possible.
just realized that the sniffer was set to 2FSK and SYNC_MODE=3, but was expecting GFSK and SYNC_MODE=0
setting it to SYNC_MODE=0 and the IMMEsniffer is receiving like *nuts!*
sadly, i am unable  to make the behavior occur using the dongle appNIC firmware.  will try switching to appSniff later.
now trying SYNC_MODE=4, and things are almost once again sane...

btw, while trying to get the dongle to mimic the behavior, i was able to get the dongle light to flash rapidly and without pattern, and when it stopped, MARCSTATE = 17 (RXOVF).  why wasn't this detected and fixed?  do we have a sequencing bug in the handler?

fixed bug in rf handler.  turns out, we were dealing with one flag in RFIF at a time, but clearing the whole thing, whether we dealt with everything or not.


got the sniffer configured with PKTCTRL1:20, PKTCTRL0:0, MDMCFG2:4, PKTLEN:0xa, and we are not receiving spurious crap... but did pick up the dongle transmitting 'DERP1234'
came across as this:
AAAA8313831382 Q110000
1010101010101010100000110001001110000011000100111000001001010001000100010000000000000000
                  |-  syncword  -||-  syncword  -|
second time:
99199a0f IAAAAA8 10000
100110010001100110011010000011110100100110101010101010101000001100010000000000000000
third time:
A0 B D F H0DA3F2AA0000
1010000001000010010001000100011001001000000011011010001111110010101010100000000000000000
fourth time:
A0 B D F H ZBEAAAA0000
fifth time:
A0 B D F H12 VD5 U0000
size thime:
A0 B D F H88EFD5 U0000
a few times later:
AAA8 1 8 1 8 %11150000
 U P B P B P J "  0000
95 U T189C189C12880000
AAAA8313831382 Q110000
AAA0C4E0C4E094 D U0000

sent:
4445525031323334
0100010001000101010100100101000000110001001100100011001100110100

sync word:
    SYNC1       = 0x0c;
    SYNC0       = 0x4e;
00001100
01001110

fyi - 
d.setModeIDLE();\
d.poke(MDMCFG2,'\x00');\
d.poke(PKTLEN, '\x0a');\
d.poke(PKTCTRL0,'\x00');\
d.setModeRX()



conclusion:
we *can* determine the SYNC WORD, within 8 possibilities.  
testing should be possibly by trying each of the 8, given that the thing transmits fairly frequently on the channel in question.
if the syncword is doubled (4 bytes), we should be able to determine it exactly.

def findDword(byts):
        possDwords = []
        # find the preamble (if any)
        bitoff = 0
        pidx = byts.find("\xaa\xaa")
        if pidx == -1:
            pidx = byts.find("\55\x55")
            bitoff = 1
        if pidx != -1: 
            byts = byts[pidx:]
        # find the definite end of the preamble (ie. it may be sooner, but we know this is the end)
        while (byts[0] == ('\xaa', '\x55')[bitoff] and len(byts)>2):
            byts = byts[1:]
        # now we look at the next 16 bits to narrow the possibilities to 8
        # at this point we have no hints at bit-alignment
        dwbits, = struct.unpack(">H", byts[:2])
        if len(byts)>=6:
            #ddwbits, = struct.unpack(">H", byts[2:4]
            bitcnt = 0
            #  bits1 =      aaaaaaaaaaaaaaaabbbbbbbbbbbbbbbb
            #  bits2 =                      bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
            bits1, = struct.unpack(">H", byts[:2])
            bits1 = bits1 | (ord(('\xaa','\x55')[bitoff]) << 16)
            bits1 = bits1 | (ord(('\xaa','\x55')[bitoff]) << 24)
            bits1 <<= 8
            bits1 |= (ord(byts[2]) )
            bits2, = struct.unpack(">L", byts[:4])
            bits2 <<= 8
            bits2 |= (ord(byts[4]) )
            frontbits = 0
            for frontbits in xrange(24):    #FIXME: if this doesn't work, try 16, then 18+frontbits
                dwb1 = (bits1 >> (16+frontbits)) & 1
                dwb2 = (bits2 >> (16+frontbits)) & 1
                print "\tfrontbits: %d \t\t dwb1: %d dwb2: %d" % (frontbits, dwb1, dwb2)
                if dwb2 != dwb1:
                    break
            # frontbits now represents our unknowns...  let's go from the other side now
            for tailbits in xrange(23, -1, -1):
                dwb1 = (bits1 >> (tailbits)) & 1
                dwb2 = (bits2 >> (tailbits)) & 1
                print "\ttailbits: %d\t\t dwb1: %d dwb2: %d" % (tailbits, dwb1, dwb2)
                if dwb2 != dwb1:
                    break
            # now, if we have a double syncword, iinm, tailbits + frontbits >= 16
            print "frontbits: %d\t\t tailbits: %d, bits: %s %s " % (frontbits, tailbits, bin(bits1), bin(bits2))
            if (frontbits + (24-tailbits) >= 16):
                tbits = bits1 >> tailbits
                tbits &= ((1<<(16+frontbits))-1)
                x = tbits >> 16
                y = tbits & 0xffff
                #x,y = struct.pack(">HH", tbits)
                print "tbits: %x" % tbits
                print "first: %x\t\t second: %x" % (x, y)
                while tbits:
                    poss = tbits&0xffff
                    if poss not in possDwords:
                        possDwords.append(tbits&0xffff)
                    tbits>>=1
        return possDwords

    except Exception,e:
        sys.excepthook(*sys.exc_info())

            done = False
            while not done:
                while (bits & 0x10001) != (bits & 1)





    except IndexError, e:
        # if we run out of bytes, we can't give a good estimation of dword
        pass

